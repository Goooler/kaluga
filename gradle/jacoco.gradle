apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage" (type:JacocoReport) {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def excludes = [
                        '**/R.class',
                        '**/R$*.class',
                        '**/Manifest*.*',
                        'android/**/*.*',
                        '**/BuildConfig.*',
                        '**/*$ViewBinder*.*',
                        '**/*$ViewInjector*.*',
                        '**/Lambda$*.class',
                        '**/Lambda.class',
                        '**/*Lambda.class',
                        '**/*Lambda*.class'
                ]

                classDirectories.setFrom(fileTree(
                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: excludes
                ) + fileTree(
                        dir: "${project.buildDir}/tmp/kotlin-classes/${sourceName}",
                        excludes: excludes
                ))

                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java",
                        "src/commonMain/kotlin",
                        "src/androidLibMain/kotlin"
                ]
                additionalSourceDirs.setFrom(files(coverageSourceDirs))
                sourceDirectories.setFrom(files(coverageSourceDirs))



                List<String> coverageFilePaths = []

                String bitRiseCoveragePath = "/$System.env.VDTESTING_DOWNLOADED_FILES_DIR/coverage.ec"
                String unitTestCoveragePath = "${project.buildDir}/jacoco/${testTaskName}UnitTest.exec"
                String connectedTestCoverageDirectoryPath = "${project.buildDir}/outputs/code_coverage/${buildTypeName}AndroidTest/connected"

                def bitRiseCoverageFile = file(bitRiseCoveragePath)
                def unitTestCoverageFile = file(unitTestCoveragePath)
                def connectedTestCoverageDirectoryFile = file(connectedTestCoverageDirectoryPath)

                logger.lifecycle(
                        "Code coverage files found: connectedTests[$connectedTestCoverageDirectoryPath](could be false if empty): ${connectedTestCoverageDirectoryFile.exists() && connectedTestCoverageDirectoryFile.list().length > 0}, " +
                        "bitRise[$bitRiseCoveragePath](may contain null if env variable not set): ${bitRiseCoverageFile.exists()}, " +
                        "unitTest[$unitTestCoveragePath]: ${unitTestCoverageFile.exists()}"
                )

                if (bitRiseCoverageFile.exists())
                    coverageFilePaths.add(bitRiseCoveragePath)
                if (unitTestCoverageFile.exists())
                    coverageFilePaths.add(unitTestCoveragePath)
                if (connectedTestCoverageDirectoryFile.exists())
                    connectedTestCoverageDirectoryFile.list().each {
                        coverageFilePaths.add("$connectedTestCoverageDirectoryPath/$it")
                    }

                if (!coverageFilePaths.isEmpty())
                    executionData.setFrom(files(coverageFilePaths))

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}
