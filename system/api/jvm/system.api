public abstract class com/splendo/kaluga/system/network/BaseNetworkManager : com/splendo/kaluga/system/network/NetworkManager {
	public fun <init> ()V
}

public abstract interface class com/splendo/kaluga/system/network/BaseNetworkManager$Builder {
	public abstract fun create ()Lcom/splendo/kaluga/system/network/BaseNetworkManager;
}

public final class com/splendo/kaluga/system/network/DefaultNetworkManager : com/splendo/kaluga/system/network/BaseNetworkManager {
	public fun <init> ()V
	public fun getNetwork ()Lkotlinx/coroutines/flow/Flow;
	public fun startMonitoring (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun stopMonitoring (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/splendo/kaluga/system/network/DefaultNetworkManager$Builder : com/splendo/kaluga/system/network/BaseNetworkManager$Builder {
	public fun <init> ()V
	public fun create ()Lcom/splendo/kaluga/system/network/BaseNetworkManager;
}

public abstract class com/splendo/kaluga/system/network/NetworkConnectionType {
}

public abstract class com/splendo/kaluga/system/network/NetworkConnectionType$Known : com/splendo/kaluga/system/network/NetworkConnectionType {
}

public final class com/splendo/kaluga/system/network/NetworkConnectionType$Known$Absent : com/splendo/kaluga/system/network/NetworkConnectionType$Known {
	public static final field INSTANCE Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Absent;
}

public abstract class com/splendo/kaluga/system/network/NetworkConnectionType$Known$Available : com/splendo/kaluga/system/network/NetworkConnectionType$Known, com/splendo/kaluga/system/network/ReachableNetworkConnection {
}

public final class com/splendo/kaluga/system/network/NetworkConnectionType$Known$Cellular : com/splendo/kaluga/system/network/NetworkConnectionType$Known$Available {
	public fun <init> ()V
	public fun <init> (Z)V
	public synthetic fun <init> (ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Z
	public final fun copy (Z)Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Cellular;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Cellular;ZILjava/lang/Object;)Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Cellular;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun isExpensive ()Z
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/system/network/NetworkConnectionType$Known$Wifi : com/splendo/kaluga/system/network/NetworkConnectionType$Known$Available {
	public fun <init> ()V
	public fun <init> (Z)V
	public synthetic fun <init> (ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Z
	public final fun copy (Z)Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Wifi;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Wifi;ZILjava/lang/Object;)Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Wifi;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun isExpensive ()Z
	public fun toString ()Ljava/lang/String;
}

public abstract class com/splendo/kaluga/system/network/NetworkConnectionType$Unknown : com/splendo/kaluga/system/network/NetworkConnectionType {
	public synthetic fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun getReason ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;
}

public final class com/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason : java/lang/Enum {
	public static final field CONNECTING Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;
	public static final field LOSING Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;
	public static final field NOT_CLEAR Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;
	public static fun valueOf (Ljava/lang/String;)Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;
	public static fun values ()[Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;
}

public final class com/splendo/kaluga/system/network/NetworkConnectionType$Unknown$WithLastNetwork : com/splendo/kaluga/system/network/NetworkConnectionType$Unknown {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known;Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;)V
	public final fun component1 ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known;
	public final fun component2 ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;
	public final fun copy (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known;Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;)Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$WithLastNetwork;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$WithLastNetwork;Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known;Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;ILjava/lang/Object;)Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$WithLastNetwork;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getLastKnown ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known;
	public fun getReason ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/system/network/NetworkConnectionType$Unknown$WithoutLastNetwork : com/splendo/kaluga/system/network/NetworkConnectionType$Unknown {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;)V
	public final fun component1 ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;
	public final fun copy (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;)Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$WithoutLastNetwork;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$WithoutLastNetwork;Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;ILjava/lang/Object;)Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$WithoutLastNetwork;
	public fun equals (Ljava/lang/Object;)Z
	public fun getReason ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/system/network/NetworkConnectionTypeKt {
	public static final fun unknown (Lcom/splendo/kaluga/system/network/NetworkConnectionType;Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;)Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;
}

public abstract interface class com/splendo/kaluga/system/network/NetworkManager {
	public abstract fun getNetwork ()Lkotlinx/coroutines/flow/Flow;
	public abstract fun startMonitoring (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun stopMonitoring (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class com/splendo/kaluga/system/network/ReachableNetworkConnection {
	public abstract fun isExpensive ()Z
}

public abstract class com/splendo/kaluga/system/network/state/BaseNetworkStateRepo : com/splendo/kaluga/base/state/ColdStateFlowRepo {
	public fun <init> (Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/CoroutineContext;)V
}

public abstract interface class com/splendo/kaluga/system/network/state/BaseNetworkStateRepoBuilder {
	public abstract fun create (Lkotlin/coroutines/CoroutineContext;)Lcom/splendo/kaluga/system/network/state/NetworkStateRepo;
}

public final class com/splendo/kaluga/system/network/state/BaseNetworkStateRepoBuilder$DefaultImpls {
	public static synthetic fun create$default (Lcom/splendo/kaluga/system/network/state/BaseNetworkStateRepoBuilder;Lkotlin/coroutines/CoroutineContext;ILjava/lang/Object;)Lcom/splendo/kaluga/system/network/state/NetworkStateRepo;
}

public abstract interface class com/splendo/kaluga/system/network/state/NetworkState : com/splendo/kaluga/base/state/KalugaState {
	public abstract fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
}

public abstract interface class com/splendo/kaluga/system/network/state/NetworkState$Active : com/splendo/kaluga/system/network/state/NetworkState {
	public abstract fun getDeinitialize ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/system/network/state/NetworkState$Active$DefaultImpls {
	public static fun remain (Lcom/splendo/kaluga/system/network/state/NetworkState$Active;)Lkotlin/jvm/functions/Function1;
}

public abstract interface class com/splendo/kaluga/system/network/state/NetworkState$Available : com/splendo/kaluga/system/network/state/NetworkState$Known {
	public abstract fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;
	public abstract fun getUnavailable ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/system/network/state/NetworkState$Available$DefaultImpls {
	public static fun remain (Lcom/splendo/kaluga/system/network/state/NetworkState$Available;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/system/network/state/NetworkState$DefaultImpls {
	public static fun remain (Lcom/splendo/kaluga/system/network/state/NetworkState;)Lkotlin/jvm/functions/Function1;
}

public abstract interface class com/splendo/kaluga/system/network/state/NetworkState$Deinitialized : com/splendo/kaluga/system/network/state/NetworkState$Inactive {
	public abstract fun getPreviousNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public abstract fun getReinitialize ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/system/network/state/NetworkState$Deinitialized$DefaultImpls {
	public static fun remain (Lcom/splendo/kaluga/system/network/state/NetworkState$Deinitialized;)Lkotlin/jvm/functions/Function1;
}

public abstract interface class com/splendo/kaluga/system/network/state/NetworkState$Inactive : com/splendo/kaluga/base/flow/SpecialFlowValue$NotImportant, com/splendo/kaluga/system/network/state/NetworkState {
}

public final class com/splendo/kaluga/system/network/state/NetworkState$Inactive$DefaultImpls {
	public static fun remain (Lcom/splendo/kaluga/system/network/state/NetworkState$Inactive;)Lkotlin/jvm/functions/Function1;
}

public abstract interface class com/splendo/kaluga/system/network/state/NetworkState$Initialized : com/splendo/kaluga/system/network/state/NetworkState$Active {
	public abstract fun available (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;)Lkotlin/jvm/functions/Function1;
	public abstract fun unknown (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/system/network/state/NetworkState$Initialized$DefaultImpls {
	public static fun remain (Lcom/splendo/kaluga/system/network/state/NetworkState$Initialized;)Lkotlin/jvm/functions/Function1;
}

public abstract interface class com/splendo/kaluga/system/network/state/NetworkState$Initializing : com/splendo/kaluga/base/flow/SpecialFlowValue$NotImportant, com/splendo/kaluga/system/network/state/NetworkState$Active {
	public abstract fun initialized (Lcom/splendo/kaluga/system/network/NetworkConnectionType;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/system/network/state/NetworkState$Initializing$DefaultImpls {
	public static fun remain (Lcom/splendo/kaluga/system/network/state/NetworkState$Initializing;)Lkotlin/jvm/functions/Function1;
}

public abstract interface class com/splendo/kaluga/system/network/state/NetworkState$Known : com/splendo/kaluga/system/network/state/NetworkState$Initialized {
	public abstract fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known;
}

public final class com/splendo/kaluga/system/network/state/NetworkState$Known$DefaultImpls {
	public static fun remain (Lcom/splendo/kaluga/system/network/state/NetworkState$Known;)Lkotlin/jvm/functions/Function1;
}

public abstract interface class com/splendo/kaluga/system/network/state/NetworkState$NotInitialized : com/splendo/kaluga/system/network/state/NetworkState$Inactive {
}

public final class com/splendo/kaluga/system/network/state/NetworkState$NotInitialized$DefaultImpls {
	public static fun remain (Lcom/splendo/kaluga/system/network/state/NetworkState$NotInitialized;)Lkotlin/jvm/functions/Function1;
}

public abstract interface class com/splendo/kaluga/system/network/state/NetworkState$Unavailable : com/splendo/kaluga/system/network/state/NetworkState$Known {
	public abstract fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Absent;
}

public final class com/splendo/kaluga/system/network/state/NetworkState$Unavailable$DefaultImpls {
	public static fun remain (Lcom/splendo/kaluga/system/network/state/NetworkState$Unavailable;)Lkotlin/jvm/functions/Function1;
}

public abstract interface class com/splendo/kaluga/system/network/state/NetworkState$Unknown : com/splendo/kaluga/system/network/state/NetworkState$Initialized {
	public abstract fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;
	public abstract fun getUnavailable ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/system/network/state/NetworkState$Unknown$DefaultImpls {
	public static fun remain (Lcom/splendo/kaluga/system/network/state/NetworkState$Unknown;)Lkotlin/jvm/functions/Function1;
}

public abstract class com/splendo/kaluga/system/network/state/NetworkStateImpl {
	public abstract fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
}

public abstract class com/splendo/kaluga/system/network/state/NetworkStateImpl$Active : com/splendo/kaluga/system/network/state/NetworkStateImpl, com/splendo/kaluga/base/state/HandleAfterNewStateIsSet, com/splendo/kaluga/base/state/HandleBeforeOldStateIsRemoved {
	public synthetic fun afterNewStateIsSet (Lcom/splendo/kaluga/base/state/KalugaState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun afterNewStateIsSet (Lcom/splendo/kaluga/system/network/state/NetworkState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public synthetic fun beforeOldStateIsRemoved (Lcom/splendo/kaluga/base/state/KalugaState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun beforeOldStateIsRemoved (Lcom/splendo/kaluga/system/network/state/NetworkState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getDeinitialize ()Lkotlin/jvm/functions/Function1;
	public abstract fun getNetworkManager ()Lcom/splendo/kaluga/system/network/NetworkManager;
}

public final class com/splendo/kaluga/system/network/state/NetworkStateImpl$Available : com/splendo/kaluga/system/network/state/NetworkStateImpl$Initialized, com/splendo/kaluga/system/network/state/NetworkState$Available {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;Lcom/splendo/kaluga/system/network/NetworkManager;)V
	public final fun component1 ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;
	public final fun component2 ()Lcom/splendo/kaluga/system/network/NetworkManager;
	public final fun copy (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;Lcom/splendo/kaluga/system/network/NetworkManager;)Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Available;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Available;Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;Lcom/splendo/kaluga/system/network/NetworkManager;ILjava/lang/Object;)Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Available;
	public fun equals (Ljava/lang/Object;)Z
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;
	public synthetic fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known;
	public synthetic fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun getNetworkManager ()Lcom/splendo/kaluga/system/network/NetworkManager;
	public fun getUnavailable ()Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/system/network/state/NetworkStateImpl$Deinitialized : com/splendo/kaluga/system/network/state/NetworkStateImpl, com/splendo/kaluga/system/network/state/NetworkState$Deinitialized {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType;Lcom/splendo/kaluga/system/network/NetworkManager;)V
	public final fun component1 ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public final fun component2 ()Lcom/splendo/kaluga/system/network/NetworkManager;
	public final fun copy (Lcom/splendo/kaluga/system/network/NetworkConnectionType;Lcom/splendo/kaluga/system/network/NetworkManager;)Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Deinitialized;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Deinitialized;Lcom/splendo/kaluga/system/network/NetworkConnectionType;Lcom/splendo/kaluga/system/network/NetworkManager;ILjava/lang/Object;)Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Deinitialized;
	public fun equals (Ljava/lang/Object;)Z
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public final fun getNetworkManager ()Lcom/splendo/kaluga/system/network/NetworkManager;
	public fun getPreviousNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun getReinitialize ()Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public abstract class com/splendo/kaluga/system/network/state/NetworkStateImpl$Initialized : com/splendo/kaluga/system/network/state/NetworkStateImpl$Active {
	public final fun available (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;)Lkotlin/jvm/functions/Function1;
	public final fun unknown (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/system/network/state/NetworkStateImpl$Initializing : com/splendo/kaluga/system/network/state/NetworkStateImpl$Active, com/splendo/kaluga/system/network/state/NetworkState$Initializing {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType;Lcom/splendo/kaluga/system/network/NetworkManager;)V
	public final fun component1 ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public final fun component2 ()Lcom/splendo/kaluga/system/network/NetworkManager;
	public final fun copy (Lcom/splendo/kaluga/system/network/NetworkConnectionType;Lcom/splendo/kaluga/system/network/NetworkManager;)Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Initializing;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Initializing;Lcom/splendo/kaluga/system/network/NetworkConnectionType;Lcom/splendo/kaluga/system/network/NetworkManager;ILjava/lang/Object;)Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Initializing;
	public fun equals (Ljava/lang/Object;)Z
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun getNetworkManager ()Lcom/splendo/kaluga/system/network/NetworkManager;
	public fun hashCode ()I
	public fun initialized (Lcom/splendo/kaluga/system/network/NetworkConnectionType;)Lkotlin/jvm/functions/Function1;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/system/network/state/NetworkStateImpl$NotInitialized : com/splendo/kaluga/system/network/state/NetworkStateImpl, com/splendo/kaluga/system/network/state/NetworkState$NotInitialized {
	public static final field INSTANCE Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$NotInitialized;
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public final fun startInitializing (Lcom/splendo/kaluga/system/network/NetworkManager;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/system/network/state/NetworkStateImpl$Unavailable : com/splendo/kaluga/system/network/state/NetworkStateImpl$Initialized, com/splendo/kaluga/system/network/state/NetworkState$Unavailable {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkManager;)V
	public final fun component1 ()Lcom/splendo/kaluga/system/network/NetworkManager;
	public final fun copy (Lcom/splendo/kaluga/system/network/NetworkManager;)Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Unavailable;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Unavailable;Lcom/splendo/kaluga/system/network/NetworkManager;ILjava/lang/Object;)Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Unavailable;
	public fun equals (Ljava/lang/Object;)Z
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Absent;
	public synthetic fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known;
	public synthetic fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun getNetworkManager ()Lcom/splendo/kaluga/system/network/NetworkManager;
	public fun hashCode ()I
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/system/network/state/NetworkStateImpl$Unknown : com/splendo/kaluga/system/network/state/NetworkStateImpl$Initialized, com/splendo/kaluga/system/network/state/NetworkState$Unknown {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;Lcom/splendo/kaluga/system/network/NetworkManager;)V
	public final fun component1 ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;
	public final fun component2 ()Lcom/splendo/kaluga/system/network/NetworkManager;
	public final fun copy (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;Lcom/splendo/kaluga/system/network/NetworkManager;)Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Unknown;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Unknown;Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;Lcom/splendo/kaluga/system/network/NetworkManager;ILjava/lang/Object;)Lcom/splendo/kaluga/system/network/state/NetworkStateImpl$Unknown;
	public fun equals (Ljava/lang/Object;)Z
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;
	public synthetic fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun getNetworkManager ()Lcom/splendo/kaluga/system/network/NetworkManager;
	public fun getUnavailable ()Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public class com/splendo/kaluga/system/network/state/NetworkStateImplRepo : com/splendo/kaluga/system/network/state/BaseNetworkStateRepo {
	public fun <init> (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/CoroutineContext;)V
}

public class com/splendo/kaluga/system/network/state/NetworkStateRepo : com/splendo/kaluga/system/network/state/NetworkStateImplRepo {
	public fun <init> (Lcom/splendo/kaluga/system/network/BaseNetworkManager$Builder;Lkotlin/coroutines/CoroutineContext;)V
}

public final class com/splendo/kaluga/system/network/state/NetworkStateRepoBuilder : com/splendo/kaluga/system/network/state/BaseNetworkStateRepoBuilder {
	public fun <init> ()V
	public fun create (Lkotlin/coroutines/CoroutineContext;)Lcom/splendo/kaluga/system/network/state/NetworkStateRepo;
}

public final class com/splendo/kaluga/system/network/state/NetworkStateRepoKt {
	public static final fun network (Lkotlinx/coroutines/flow/Flow;)Lkotlinx/coroutines/flow/Flow;
	public static final fun online (Lkotlinx/coroutines/flow/Flow;)Lkotlinx/coroutines/flow/Flow;
}

