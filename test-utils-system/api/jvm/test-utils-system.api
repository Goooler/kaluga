public final class com/splendo/kaluga/test/system/network/MockBaseNetworkManager : com/splendo/kaluga/system/network/BaseNetworkManager {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType;)V
	public synthetic fun getNetwork ()Lkotlinx/coroutines/flow/Flow;
	public fun getNetwork ()Lkotlinx/coroutines/flow/MutableStateFlow;
	public final fun getStartMonitoringMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStopMonitoringMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public fun startMonitoring (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun stopMonitoring (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/splendo/kaluga/test/system/network/MockBaseNetworkManager$Builder : com/splendo/kaluga/system/network/BaseNetworkManager$Builder {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType;Z)V
	public synthetic fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun create ()Lcom/splendo/kaluga/system/network/BaseNetworkManager;
	public final fun getBuiltNetworkManagers ()Ljava/util/List;
	public final fun getCreateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
}

public final class com/splendo/kaluga/test/system/network/MockNetworkManager : com/splendo/kaluga/system/network/NetworkManager {
	public fun <init> (Lkotlinx/coroutines/flow/MutableSharedFlow;)V
	public synthetic fun getNetwork ()Lkotlinx/coroutines/flow/Flow;
	public fun getNetwork ()Lkotlinx/coroutines/flow/MutableSharedFlow;
	public final fun getStartMonitoringMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStopMonitoringMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public fun startMonitoring (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun stopMonitoring (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class com/splendo/kaluga/test/system/network/MockNetworkState {
	public abstract fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
}

public abstract class com/splendo/kaluga/test/system/network/MockNetworkState$Active : com/splendo/kaluga/test/system/network/MockNetworkState {
	public final fun getDeinitialize ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/system/network/MockNetworkState$Available : com/splendo/kaluga/test/system/network/MockNetworkState$Initialized, com/splendo/kaluga/system/network/state/NetworkState$Available {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;)V
	public final fun component1 ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;
	public final fun copy (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;)Lcom/splendo/kaluga/test/system/network/MockNetworkState$Available;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/system/network/MockNetworkState$Available;Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;ILjava/lang/Object;)Lcom/splendo/kaluga/test/system/network/MockNetworkState$Available;
	public fun equals (Ljava/lang/Object;)Z
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;
	public synthetic fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known;
	public synthetic fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun getUnavailable ()Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/system/network/MockNetworkState$Deinitialized : com/splendo/kaluga/test/system/network/MockNetworkState, com/splendo/kaluga/system/network/state/NetworkState$Deinitialized {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType;)V
	public final fun component1 ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public final fun copy (Lcom/splendo/kaluga/system/network/NetworkConnectionType;)Lcom/splendo/kaluga/test/system/network/MockNetworkState$Deinitialized;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/system/network/MockNetworkState$Deinitialized;Lcom/splendo/kaluga/system/network/NetworkConnectionType;ILjava/lang/Object;)Lcom/splendo/kaluga/test/system/network/MockNetworkState$Deinitialized;
	public fun equals (Ljava/lang/Object;)Z
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun getPreviousNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun getReinitialize ()Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public abstract class com/splendo/kaluga/test/system/network/MockNetworkState$Inactive : com/splendo/kaluga/test/system/network/MockNetworkState {
}

public abstract class com/splendo/kaluga/test/system/network/MockNetworkState$Initialized : com/splendo/kaluga/test/system/network/MockNetworkState$Active {
	public final fun available (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Available;)Lkotlin/jvm/functions/Function1;
	public final fun unknown (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown$Reason;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/system/network/MockNetworkState$Initializing : com/splendo/kaluga/test/system/network/MockNetworkState$Active, com/splendo/kaluga/system/network/state/NetworkState$Initializing {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType;)V
	public final fun component1 ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public final fun copy (Lcom/splendo/kaluga/system/network/NetworkConnectionType;)Lcom/splendo/kaluga/test/system/network/MockNetworkState$Initializing;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/system/network/MockNetworkState$Initializing;Lcom/splendo/kaluga/system/network/NetworkConnectionType;ILjava/lang/Object;)Lcom/splendo/kaluga/test/system/network/MockNetworkState$Initializing;
	public fun equals (Ljava/lang/Object;)Z
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun hashCode ()I
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun initialized (Lcom/splendo/kaluga/system/network/NetworkConnectionType;)Lkotlin/jvm/functions/Function1;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/system/network/MockNetworkState$NotInitialized : com/splendo/kaluga/test/system/network/MockNetworkState$Inactive, com/splendo/kaluga/system/network/state/NetworkState$NotInitialized {
	public static final field INSTANCE Lcom/splendo/kaluga/test/system/network/MockNetworkState$NotInitialized;
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun remain ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/system/network/MockNetworkState$Unavailable : com/splendo/kaluga/test/system/network/MockNetworkState$Initialized, com/splendo/kaluga/system/network/state/NetworkState$Unavailable {
	public static final field INSTANCE Lcom/splendo/kaluga/test/system/network/MockNetworkState$Unavailable;
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known$Absent;
	public synthetic fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Known;
	public synthetic fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun remain ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/system/network/MockNetworkState$Unknown : com/splendo/kaluga/test/system/network/MockNetworkState$Initialized, com/splendo/kaluga/system/network/state/NetworkState$Unknown {
	public fun <init> (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;)V
	public final fun component1 ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;
	public final fun copy (Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;)Lcom/splendo/kaluga/test/system/network/MockNetworkState$Unknown;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/system/network/MockNetworkState$Unknown;Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;ILjava/lang/Object;)Lcom/splendo/kaluga/test/system/network/MockNetworkState$Unknown;
	public fun equals (Ljava/lang/Object;)Z
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType$Unknown;
	public synthetic fun getNetworkConnectionType ()Lcom/splendo/kaluga/system/network/NetworkConnectionType;
	public fun getUnavailable ()Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/system/network/MockNetworkStateRepoBuilder : com/splendo/kaluga/system/network/state/BaseNetworkStateRepoBuilder {
	public fun <init> (Lcom/splendo/kaluga/system/network/BaseNetworkManager$Builder;Z)V
	public synthetic fun <init> (Lcom/splendo/kaluga/system/network/BaseNetworkManager$Builder;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun create (Lkotlin/coroutines/CoroutineContext;)Lcom/splendo/kaluga/system/network/state/NetworkStateRepo;
	public final fun getBuiltNetworkStateRepo ()Ljava/util/List;
	public final fun getCreateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getNetworkManagerBuilder ()Lcom/splendo/kaluga/system/network/BaseNetworkManager$Builder;
}

