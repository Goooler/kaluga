disabled_rules: # rule identifiers to exclude from running
  - conditional_returns_on_newline
  - inclusive_language
  - let_var_whitespace
  - nesting
  - pattern_matching_keywords
  - superfluous_disable_command
  - todo
  - trailing_whitespace
  - weak_delegate
  - no_space_in_method_call
  - compiler_protocol_init
  - overridden_super_call
opt_in_rules: # some rules are only opt-in
  - anyobject_protocol
  - array_init
#  - attributes
  - collection_alignment
  - conditional_returns_on_newline
  - contains_over_filter_count
  - contains_over_filter_is_empty
  - contains_over_first_not_nil
  - contains_over_range_nil_comparison
  - convenience_type
  - closure_end_indentation
  - closure_spacing
  - empty_count
  - empty_collection_literal
  - empty_string
#  - explicit_enum_raw_value
  - fatal_error_message
#  - file_name
  - file_name_no_space
#  - file_types_order
  - first_where
  - flatmap_over_map_reduce
  - for_where
#  - force_unwrapping
  - identical_operands
  - implicit_return
  - joined_default_parameter
  - last_where
  - legacy_random
  - literal_expression_end_indentation
  - modifier_order
  - multiline_arguments
  - multiline_function_chains
#  - multiline_literal_brackets
  - multiline_parameters
  - operator_usage_whitespace
  - override_in_extension
  - overridden_super_call
  - prefer_self_type_over_type_of_self
#  - prefixed_toplevel_constant
  - prohibited_super_call
  - redundant_discardable_let
  - redundant_nil_coalescing
  - redundant_objc_attribute
  - redundant_optional_initialization
  - redundant_set_access_control
  - redundant_type_annotation
  - redundant_void_return
  - return_arrow_whitespace
  - sorted_first_last
  - static_operator
  - toggle_bool
  - trailing_closure
#  - type_contents_order
  - unneeded_parentheses_in_closure_argument
#  - unowned_variable_capture
  - vertical_parameter_alignment_on_call
  - vertical_whitespace
#  - vertical_whitespace_between_cases
  - vertical_whitespace_closing_braces
#  - vertical_whitespace_opening_braces
  - yoda_condition
  # Find all the available rules by running:
  # swiftlint rules
analyzer_rules:
  - unused_declaration
  - unused_import
excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Pods
  - Carthage

cyclomatic_complexity:
  ignores_case_statements: true
# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # implicitly
force_try:
  severity: warning # explicitly
# rules that have both warning and error levels, can set just the warning level
# implicitly
line_length: 160
type_body_length:
  - 300 # warning
  - 400 # error
function_body_length:
 - 200 # warning
 - 300 # error
file_length:
  warning: 300
  error: 400
implicit_return:
  included:
    - closure
type_name:
  min_length: 3 # only warning
  max_length: # warning and error
    warning: 60
    error: 100
  excluded:
  - iPhone
  - ID
generic_type_name:
  max_length: 30

identifier_name:
  min_length: # only min_length
    error: 3 # only error
  excluded:
    - id
    - to
    - of
    - go
    - up
    - on
    - in
    - qa
    - en
    - nl
    - be
    - ch
    - de
    - no
    - fr
    - gb
    - uk
    - wp
#reporter: "xcode" # reporter type (xcode, json, csv, checkstyle, junit)